Model Deployment:

Two Ways - 
    1. Batch (offline mode) - Run Regularly
    2. Streaming (Running Continously) (Online Mode) - 
        a) Web Services
        b) Streaming

Batch:
    Regular Interval model run - (hourly, Daily, weekly, monthly etc)
        Database -> Running model Daily -> Prediction -> Dashboard

        ex. Marketing Related Task (Churn Predction)

Web Service:
    - Up and Running all the time
    - Instant Predction
    - kind of client-server (1*1 Relationship where client is backend)

    User(App) -> Backend -> Model -> Predict -> User
    
    ex. Taxi Ride duration prediction


Streaming:
    - (1*N) or (N*N) Relationship
    - one or more producers and one or more consumers
    ![image.png](attachment:b6f47ba9-6981-469e-a5f0-cb7e3e30a350.png)
    
    - there is no direct connection between producers and consumers
    ex. User(App) -> Backend -> Ride_Started -> Tip_Prediction
                                          -> Duration_Predction  

    ex. User (Uploads Video on the youtube) -> Backend -> EventStream -> consumer1 (Copyright violation) ->
                                                                -> Consumer2 (Adult videos restrcion) > prediction Event Stream - > Decision Service 
                                                                       -> consumer3 (violence) ->
                                                                       -> etc ->

    ex. Recommendation Systme: once video uploded whome to notify, whome to avoid etc.


create virtual environment to have the same dependecies as ML model:

    -pip install pipenv
    -pipenv install scikit-learn==1.3.0 flask
    -to activate it: pipenv shell
    -to decativate: exit, deactivate
    -to clear the cache: pipenv --clear



Deployment with Flask:
after running flask we get this warning,
WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.

so for production enviornment install gunicorn

pipenv install gunicorn
gunicorn --bind=0.0.0.0:9696 predict:app

Development dependancies only installation in virtual enviournment:
    pipenv install --dev requests

to remove virtual enviornment:
    -pipenv --rm
    -rm Pipfile Pipfile.lock

- Create the Dockerfile and build the image:
docker build -t ride-duration-prediction-service:v1 .

- RUN the image:
docker run -it --rm -p 9696:9696 ride-duration-prediction-service:v1


***** Bonus ******:
Steps to Deploy Flask app to AWS EC2
1. connect to ec2 instance
ssh -i /path/to/your-key-pair.pem ec2-user@your-ec2-public-dns

2. Install Docker on EC2:
-Update the Installed Packages and Package Cache: sudo yum update -y
-Install Docker: sudo amazon-linux-extras install docker -y
-Start Docker: sudo service docker start
-Add the ec2-user to the docker group: sudo usermod -a -G docker ec2-user
-Reboot the instance: sudo reboot
-Reconnect to Your EC2 Instance.

3. Deploy docker flask app on EC2:
-Transfer files to ec2:
 scp -i /path/to/your-key-pair.pem -r /path/to/your/flask-app ec2-user@your-ec2-public-dns:/home/ec2-user
-Build the Docker Image:
    cd /home/ec2-user/flask-app
    docker build -t flask-app .

4. Run the Docker Container:
    docker run -p 9696:9696 flask-app

run from ec2:
curl -X POST http://your-ec2-public-dns:9696/predict -H "Content-Type: application/json" -d '{"PULocationID": 10, "DOLocationID": 50,  "trip_distance": 40}'




    